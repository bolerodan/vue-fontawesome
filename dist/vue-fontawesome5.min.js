/*!
* VueFa v0.0.2
* Created By Dan Wallace
* Released under the MIT License.
*/     
!(function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.VueFa=e():t.VueFa=e()})(this,(function(){return (function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="/dist/",e(e.s=0)})([(function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r=(function(t){return t&&t.__esModule?t:{default:t}})(o),i=function(t){t.component("fa",r.default)};"undefined"!=typeof window&&window.Vue&&window.Vue.use(i),e.default=i}),(function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={props:{icon:{required:!0},prefix:{required:!1,default:"fa"},transform:{required:!1,type:String}},data:function(){return{foundIcon:void 0,booted:!1}},computed:{prefixIconName:function(){return this.prefix+" fa-"+this.icon}},created:function(){var t=this;"complete"!==document.readyState||"loaded"!==document.readyState?document.addEventListener("DOMContentLoaded",(function(){return t.initFa()})):this.initFa()},methods:{initFa:function(){this.faAPI=window.FontAwesome,this.getIconDef(),this.booted=!0,document.removeEventListener("DOMContentLoaded",this.initFa)},getIconDef:function(){this.iconDef=this.faAPI.parse.iconFromPack(this.prefix+" "+this.prefixIconName);var t={transform:this.getTransform()};this.foundIcon=this.faAPI.icon(this.iconDef,t)},getTransform:function(){return this.faAPI.parse.transform(this.transform)}},render:function(t){var e=this;if(this.booted){var n=this.foundIcon.abstract[0],o=n.children.map((function(n){return t(n.tag,{key:e.prefixIconName,attrs:n.attributes})}));return t(n.tag,{key:this.prefixIconName,attrs:n.attributes,class:n.attributes.class},o)}},watch:{prefixIconName:function(t){this.getIconDef()},transform:function(t){this.getIconDef()}}}})])}));